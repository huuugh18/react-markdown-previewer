{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","input","target","value","markup","console","log","state","__html","toString","previewText","bind","assertThisInitialized","react_default","a","createElement","className","Paper_default","id","Typography_default","component","variant","align","Card_default","CardHeader_default","title","CardContent_default","TextField_default","multiline","onChange","margin","fullWidth","dangerouslySetInnerHTML","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAUAA,IAAOC,WAAW,CAChBC,QAAO,QAGHC,cACJ,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQFI,aAAe,SAAAC,GACbR,EAAKS,SAAS,CACZC,MAAOF,EAAEG,OAAOC,SAXPZ,EAcba,OAAS,WAGP,OAFAC,QAAQC,IAAI,QAAQf,EAAKgB,MAAMN,OAExB,CAACO,OADUrB,IAAOI,EAAKgB,MAAMN,MAAMQ,cAd1ClB,EAAKgB,MAAM,CACPN,MAAOS,GAEXnB,EAAKO,aAAeP,EAAKO,aAAaa,KAAlBnB,OAAAoB,EAAA,EAAApB,QAAAoB,EAAA,EAAApB,CAAAD,KACpBA,EAAKa,OAASb,EAAKa,OAAOO,KAAZnB,OAAAoB,EAAA,EAAApB,QAAAoB,EAAA,EAAApB,CAAAD,KANHA,wEAoBX,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAOI,GAAG,cACRL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYM,UAAU,KAAKC,QAAQ,KAAKC,MAAM,SAASJ,GAAG,mBAA1D,uBAIFL,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAMI,GAAG,cAAcF,UAAU,uBAC/BH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACEW,MAAM,oBAENZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,KACID,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CACEI,GAAG,SACHU,WAAS,EACTzB,MAAOT,KAAKa,MAAMN,MAClB4B,SAAUnC,KAAKI,aACfgC,OAAO,SACPC,WAAS,EACTV,QAAQ,aAIlBR,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAMI,GAAG,iBAAiBF,UAAU,uBAClCH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACEW,MAAM,qBAENZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAaI,GAAG,gBACZL,EAAAC,EAAAC,cAAA,QACEG,GAAG,UACHc,wBAAyBtC,KAAKU,aAItCS,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UACNL,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,0DAAR,sEAxDIC,aA8DZxB,EAAc,oiCAiBLpB,ICjFK6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b634fa1a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper'\nimport marked from 'marked'\n\nmarked.setOptions({\n  breaks:true\n})\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n        input: previewText,\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.markup = this.markup.bind(this)\n  }\n  \n  handleChange = e => {\n    this.setState({\n      input: e.target.value,\n    })\n  }\n  markup = () => {\n    console.log('state',this.state.input)\n    const rawMarkup = marked(this.state.input.toString())\n    return {__html:rawMarkup}\n  }\n  render() {\n    return (\n      <div className=\"App\">\n          <Paper id=\"app-header\">\n            <Typography component=\"h2\" variant=\"h2\" align=\"center\" id=\"app-header-type\">\n              Markdown Previewer\n            </Typography>\n          </Paper>\n          <Card id=\"card-editor\" className='text-card-container'>\n            <CardHeader \n              title=\"Markdown Editor\"\n            />\n              <CardContent>\n                  <TextField \n                    id=\"editor\"\n                    multiline\n                    value={this.state.input}\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                    fullWidth\n                    variant=\"filled\"\n                  />\n              </CardContent>\n            </Card>\n          <Card id=\"card-previewer\" className='text-card-container'>\n            <CardHeader\n              title=\"Markdown Preview\"\n            />\n              <CardContent id=\"preview-area\">\n                  <span \n                    id=\"preview\"\n                    dangerouslySetInnerHTML={this.markup()}\n                  />\n              </CardContent>\n            </Card>\n            <div id=\"footer\">\n              <a href=\"https://www.freepik.com/free-photos-vectors/background\">Background vector created by kjpargeter - www.freepik.com</a>\n            </div>\n      </div>\n    );\n  }\n}\nconst previewText = 'Markdown Quick Start\\\n                  \\r\\r # A large heading \\r ## Next largest \\r ###### Smallest \\\n                  \\r\\r **This is bold text**  \\r __So is this__  \\\n                  \\r\\r *This text is italicized*  \\r _So is this_  \\\n                  \\r\\r ~~This was mistaken text~~  \\\n                  \\r\\r To quote use  \\r > to denote the quoted text  \\\n                  \\r\\r Use `backticks` for codes or commands  \\\n                  \\r Use \\r ``` \\r triple backticks \\r for multiple lines \\r of code \\r ```  \\\n                  \\r\\r Create inline links like so  \\\n                  \\r This app was built using [React](https://facebook.github.io/react/index.html)  \\\n                  \\r\\r Unordered lists\\\n                  \\r\\r * Fish  \\r * Chips  \\r * Peas\\\n                  \\r\\r Nested & ordered Lists\\\n                  \\r\\rq ![Image of Yaktocat](https://openclipart.org/download/288754/laptop-personification-work-ready-body-builder.svg) \\\n                  \\r\\r1. Breakfast\\r    - Toast\\r    - Cereal  \\r2. Dinner\\r    * Fish & Chips\\r      - Peas\\r    * Pie & Chips';\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}